package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/ArthurHlt/go-eureka-client/eureka"
	_ "github.com/go-sql-driver/mysql"
	"github.com/gorilla/mux"
	"github.com/spf13/viper"
	_ "github.com/swaggo/http-swagger/example/go-chi/docs" // docs is generated by Swag CLI, you have to import it.
	httpSwagger "github.com/swaggo/http-swagger/v2"
)

func getEnv() string {
	return os.Getenv("APP_ENV")
}

type Agency struct {
	ID               int    `json:"id"`
	AgencyCode       string `json:"agency_code"`
	AgencyName       string `json:"agency_name"`
	Address1         string `json:"address_1"`
	Address2         string `json:"address_2"`
	Address3         string `json:"address_3"`
	Phone            string `json:"phone"`
	Fax              string `json:"fax"`
	Email            string `json:"email"`
	Website          string `json:"website"`
	AgencyDiscount   int    `json:"agency_discount"`
	AgencyTop        int    `json:"agency_top"`
	IsDirectClient   int    `json:"is_direct_client"`
	IsDirectClientId int    `json:"is_direct_client_id"`
	IsFull           int    `json:"is_full"`
	ActiveStatus     int    `json:"active_status"`
}

var db *sql.DB
var err error

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v2
func main() {

	client := eureka.NewClient([]string{
		"http://172.16.2.21:8762", //From a spring boot based eureka server
		// add others servers here
	})

	instance := eureka.NewInstanceInfo("test.com", "test", "69.172.200.235", 80, 30, false) //Create a new instance to register
	instance.Metadata = &eureka.MetaData{
		Map: make(map[string]string),
	}
	instance.Metadata.Map["foo"] = "bar"                  //add metadata for example
	client.RegisterInstance("myapp", instance)            // Register new instance in your eureka(s)
	applications, _ := client.GetApplications()           // Retrieves all applications from eureka server(s)
	client.GetApplication(instance.App)                   // retrieve the application "test"
	client.GetInstance(instance.App, instance.HostName)   // retrieve the instance from "test.com" inside "test"" app
	client.SendHeartbeat(instance.App, instance.HostName) // say to eureka that your app is alive (here you must send heartbeat before 30 sec)

	print(applications)
	print(client)

	viper.SetConfigName("dev")
	viper.AddConfigPath(".")
	// Enable VIPER to read Environment Variables
	viper.AutomaticEnv()

	viper.SetConfigType("yml")

	if err := viper.ReadInConfig(); err != nil {
		fmt.Printf("Error reading config file, %s", err)
	}

	// Set undefined variables
	viper.SetDefault("DB.HOST", "k8s.devel.intra.db.cinema21.co.id")

	DBHost, ok := viper.Get("DB.HOST").(string)
	DBPort, ok := viper.Get("DB.PORT").(string)
	DBUsername, ok := viper.Get("DB.USERNAME").(string)
	DBPassword, ok := viper.Get("DB.PASSWORD").(string)
	DBName, ok := viper.Get("DB.NAME").(string)

	if !ok {
		log.Fatalf("Invalid type assertion")
	}

	fmt.Printf("viper : %s = %s \n", "Database Host", DBHost)
	fmt.Printf("viper : %s = %s \n", "Database Port", DBPort)
	fmt.Printf("viper : %s = %s \n", "Database Username", DBUsername)
	fmt.Printf("viper : %s = %s \n", "Database Password", DBPassword)
	fmt.Printf("viper : %s = %s \n", "Database Name", DBName)

	// db, err = sql.Open("mysql", "dsserver:xxi2121.@tcp(k8s.devel.intra.db.cinema21.co.id:3306)/db_digsig")
	db, err = sql.Open("mysql", DBUsername+":"+DBPassword+"@tcp("+DBHost+":"+DBPort+")/"+DBName)
	if err != nil {
		panic(err.Error())
	}
	defer db.Close()

	router := mux.NewRouter()
	router.HandleFunc("/get", getAgency).Methods("GET")
	router.HandleFunc("/get/{id}", getAgencyById).Methods("GET")
	router.HandleFunc("/swagger/*", httpSwagger.Handler(
		httpSwagger.URL("http://localhost:8000/swagger/docs/doc.json"), //The url pointing to API definition
	))
	http.ListenAndServe(":8000", router)
}

func getAgency(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	var agencies []Agency
	result, err := db.Query("SELECT id,agency_code,agency_name,address_1,address_2,address_3,phone,fax,email,website,agency_discount,agency_top,is_direct_client,is_direct_client_id,is_full,active_status from ds_agency")
	if err != nil {
		panic(err.Error())
	}
	defer result.Close()
	for result.Next() {
		var agency Agency
		err := result.Scan(&agency.ID, &agency.AgencyCode, &agency.AgencyName, &agency.Address1, &agency.Address2, &agency.Address3, &agency.Phone, &agency.Fax, &agency.Email, &agency.Website, &agency.AgencyDiscount, &agency.AgencyTop, &agency.IsDirectClient, &agency.IsDirectClientId, &agency.IsFull, &agency.ActiveStatus)
		if err != nil {
			panic(err.Error())
		}
		agencies = append(agencies, agency)
	}
	json.NewEncoder(w).Encode(agencies)
}

func getAgencyById(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r)

	result, err := db.Query("SELECT id,agency_code,agency_name,address_1,address_2,address_3,phone,fax,email,website,agency_discount,agency_top,is_direct_client,is_direct_client_id,is_full,active_status from ds_agency where id = ?", params["id"])
	if err != nil {
		panic(err.Error())
	}
	defer result.Close()

	var agency Agency

	for result.Next() {
		err := result.Scan(&agency.ID, &agency.AgencyCode, &agency.AgencyName, &agency.Address1, &agency.Address2, &agency.Address3, &agency.Phone, &agency.Fax, &agency.Email, &agency.Website, &agency.AgencyDiscount, &agency.AgencyTop, &agency.IsDirectClient, &agency.IsDirectClientId, &agency.IsFull, &agency.ActiveStatus)
		if err != nil {
			panic(err.Error())
		}
	}
	json.NewEncoder(w).Encode(agency)
}

func deleteAgency(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	stmt, err := db.Prepare("DELETE FROM ds_agency WHERE id = ?")
	if err != nil {
		panic(err.Error())
	}
	_, err = stmt.Exec(params["id"])
	if err != nil {
		panic(err.Error())
	}
	fmt.Fprintf(w, "Agency with ID = %s was deleted", params["id"])
}
